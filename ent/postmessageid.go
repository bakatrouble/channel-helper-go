// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/postmessageid"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// PostMessageId is the model entity for the PostMessageId schema.
type PostMessageId struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID int `json:"message_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostMessageIdQuery when eager-loading is set.
	Edges            PostMessageIdEdges `json:"edges"`
	post_message_ids *uuidv7.UUID
	selectValues     sql.SelectValues
}

// PostMessageIdEdges holds the relations/edges for other nodes in the graph.
type PostMessageIdEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostMessageIdEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostMessageId) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postmessageid.FieldID, postmessageid.FieldChatID, postmessageid.FieldMessageID:
			values[i] = new(sql.NullInt64)
		case postmessageid.ForeignKeys[0]: // post_message_ids
			values[i] = &sql.NullScanner{S: new(uuidv7.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostMessageId fields.
func (_m *PostMessageId) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postmessageid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case postmessageid.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				_m.ChatID = value.Int64
			}
		case postmessageid.FieldMessageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				_m.MessageID = int(value.Int64)
			}
		case postmessageid.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field post_message_ids", values[i])
			} else if value.Valid {
				_m.post_message_ids = new(uuidv7.UUID)
				*_m.post_message_ids = *value.S.(*uuidv7.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostMessageId.
// This includes values selected through modifiers, order, etc.
func (_m *PostMessageId) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the PostMessageId entity.
func (_m *PostMessageId) QueryPost() *PostQuery {
	return NewPostMessageIdClient(_m.config).QueryPost(_m)
}

// Update returns a builder for updating this PostMessageId.
// Note that you need to call PostMessageId.Unwrap() before calling this method if this PostMessageId
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *PostMessageId) Update() *PostMessageIdUpdateOne {
	return NewPostMessageIdClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the PostMessageId entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *PostMessageId) Unwrap() *PostMessageId {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostMessageId is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *PostMessageId) String() string {
	var builder strings.Builder
	builder.WriteString("PostMessageId(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ChatID))
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.MessageID))
	builder.WriteByte(')')
	return builder.String()
}

// PostMessageIds is a parsable slice of PostMessageId.
type PostMessageIds []*PostMessageId
