// Code generated by ent, DO NOT EDIT.

package uploadtask

import (
	"channel-helper-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// ID filters vertices based on their ID field.
func ID(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuidv7.UUID) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLTE(FieldID, id))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldData, v))
}

// IsProcessed applies equality check predicate on the "is_processed" field. It's identical to IsProcessedEQ.
func IsProcessed(v bool) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldIsProcessed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldCreatedAt, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldSentAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotIn(FieldType, vs...))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLTE(FieldData, v))
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIsNull(FieldData))
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotNull(FieldData))
}

// IsProcessedEQ applies the EQ predicate on the "is_processed" field.
func IsProcessedEQ(v bool) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldIsProcessed, v))
}

// IsProcessedNEQ applies the NEQ predicate on the "is_processed" field.
func IsProcessedNEQ(v bool) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNEQ(FieldIsProcessed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLTE(FieldCreatedAt, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.UploadTask {
	return predicate.UploadTask(sql.FieldLTE(FieldSentAt, v))
}

// SentAtIsNil applies the IsNil predicate on the "sent_at" field.
func SentAtIsNil() predicate.UploadTask {
	return predicate.UploadTask(sql.FieldIsNull(FieldSentAt))
}

// SentAtNotNil applies the NotNil predicate on the "sent_at" field.
func SentAtNotNil() predicate.UploadTask {
	return predicate.UploadTask(sql.FieldNotNull(FieldSentAt))
}

// HasImageHash applies the HasEdge predicate on the "image_hash" edge.
func HasImageHash() predicate.UploadTask {
	return predicate.UploadTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ImageHashTable, ImageHashColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageHashWith applies the HasEdge predicate on the "image_hash" edge with a given conditions (other predicates).
func HasImageHashWith(preds ...predicate.ImageHash) predicate.UploadTask {
	return predicate.UploadTask(func(s *sql.Selector) {
		step := newImageHashStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UploadTask) predicate.UploadTask {
	return predicate.UploadTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UploadTask) predicate.UploadTask {
	return predicate.UploadTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UploadTask) predicate.UploadTask {
	return predicate.UploadTask(sql.NotPredicates(p))
}
