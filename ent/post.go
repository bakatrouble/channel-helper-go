// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/post"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID uuidv7.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type post.Type `json:"type,omitempty"`
	// FileID holds the value of the "file_id" field.
	FileID string `json:"file_id,omitempty"`
	// IsSent holds the value of the "is_sent" field.
	IsSent bool `json:"is_sent,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// ImageHash holds the value of the "image_hash" field.
	ImageHash string `json:"image_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges        PostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// MessageIds holds the value of the message_ids edge.
	MessageIds []*PostMessageId `json:"message_ids,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessageIdsOrErr returns the MessageIds value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) MessageIdsOrErr() ([]*PostMessageId, error) {
	if e.loadedTypes[0] {
		return e.MessageIds, nil
	}
	return nil, &NotLoadedError{edge: "message_ids"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldIsSent:
			values[i] = new(sql.NullBool)
		case post.FieldType, post.FieldFileID, post.FieldImageHash:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt, post.FieldSentAt:
			values[i] = new(sql.NullTime)
		case post.FieldID:
			values[i] = new(uuidv7.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (_m *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			if value, ok := values[i].(*uuidv7.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case post.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = post.Type(value.String)
			}
		case post.FieldFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				_m.FileID = value.String
			}
		case post.FieldIsSent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_sent", values[i])
			} else if value.Valid {
				_m.IsSent = value.Bool
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case post.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				_m.SentAt = value.Time
			}
		case post.FieldImageHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_hash", values[i])
			} else if value.Valid {
				_m.ImageHash = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Post.
// This includes values selected through modifiers, order, etc.
func (_m *Post) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryMessageIds queries the "message_ids" edge of the Post entity.
func (_m *Post) QueryMessageIds() *PostMessageIdQuery {
	return NewPostClient(_m.config).QueryMessageIds(_m)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Post) Update() *PostUpdateOne {
	return NewPostClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Post) Unwrap() *Post {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(_m.FileID)
	builder.WriteString(", ")
	builder.WriteString("is_sent=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsSent))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(_m.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image_hash=")
	builder.WriteString(_m.ImageHash)
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post
