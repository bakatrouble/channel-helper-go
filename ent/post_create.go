// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/imagehash"
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/postmessageid"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	mutation *PostMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (_c *PostCreate) SetType(v post.Type) *PostCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *PostCreate) SetFileID(v string) *PostCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetIsSent sets the "is_sent" field.
func (_c *PostCreate) SetIsSent(v bool) *PostCreate {
	_c.mutation.SetIsSent(v)
	return _c
}

// SetNillableIsSent sets the "is_sent" field if the given value is not nil.
func (_c *PostCreate) SetNillableIsSent(v *bool) *PostCreate {
	if v != nil {
		_c.SetIsSent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *PostCreate) SetCreatedAt(v time.Time) *PostCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *PostCreate) SetNillableCreatedAt(v *time.Time) *PostCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetSentAt sets the "sent_at" field.
func (_c *PostCreate) SetSentAt(v time.Time) *PostCreate {
	_c.mutation.SetSentAt(v)
	return _c
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (_c *PostCreate) SetNillableSentAt(v *time.Time) *PostCreate {
	if v != nil {
		_c.SetSentAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PostCreate) SetID(v uuidv7.UUID) *PostCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PostCreate) SetNillableID(v *uuidv7.UUID) *PostCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddMessageIDIDs adds the "message_ids" edge to the PostMessageId entity by IDs.
func (_c *PostCreate) AddMessageIDIDs(ids ...int) *PostCreate {
	_c.mutation.AddMessageIDIDs(ids...)
	return _c
}

// AddMessageIds adds the "message_ids" edges to the PostMessageId entity.
func (_c *PostCreate) AddMessageIds(v ...*PostMessageId) *PostCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMessageIDIDs(ids...)
}

// SetImageHashID sets the "image_hash" edge to the ImageHash entity by ID.
func (_c *PostCreate) SetImageHashID(id int) *PostCreate {
	_c.mutation.SetImageHashID(id)
	return _c
}

// SetNillableImageHashID sets the "image_hash" edge to the ImageHash entity by ID if the given value is not nil.
func (_c *PostCreate) SetNillableImageHashID(id *int) *PostCreate {
	if id != nil {
		_c = _c.SetImageHashID(*id)
	}
	return _c
}

// SetImageHash sets the "image_hash" edge to the ImageHash entity.
func (_c *PostCreate) SetImageHash(v *ImageHash) *PostCreate {
	return _c.SetImageHashID(v.ID)
}

// Mutation returns the PostMutation object of the builder.
func (_c *PostCreate) Mutation() *PostMutation {
	return _c.mutation
}

// Save creates the Post in the database.
func (_c *PostCreate) Save(ctx context.Context) (*Post, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PostCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PostCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PostCreate) defaults() {
	if _, ok := _c.mutation.IsSent(); !ok {
		v := post.DefaultIsSent
		_c.mutation.SetIsSent(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := post.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := post.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PostCreate) check() error {
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Post.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := post.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Post.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "Post.file_id"`)}
	}
	if _, ok := _c.mutation.IsSent(); !ok {
		return &ValidationError{Name: "is_sent", err: errors.New(`ent: missing required field "Post.is_sent"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Post.created_at"`)}
	}
	return nil
}

func (_c *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuidv7.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PostCreate) createSpec() (*Post, *sqlgraph.CreateSpec) {
	var (
		_node = &Post{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(post.Table, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(post.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.FileID(); ok {
		_spec.SetField(post.FieldFileID, field.TypeString, value)
		_node.FileID = value
	}
	if value, ok := _c.mutation.IsSent(); ok {
		_spec.SetField(post.FieldIsSent, field.TypeBool, value)
		_node.IsSent = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.SentAt(); ok {
		_spec.SetField(post.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if nodes := _c.mutation.MessageIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ImageHashIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   post.ImageHashTable,
			Columns: []string{post.ImageHashColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostCreateBulk is the builder for creating many Post entities in bulk.
type PostCreateBulk struct {
	config
	err      error
	builders []*PostCreate
}

// Save creates the Post entities in the database.
func (_c *PostCreateBulk) Save(ctx context.Context) ([]*Post, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Post, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PostCreateBulk) SaveX(ctx context.Context) []*Post {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PostCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PostCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
