// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/imagehash"
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/postmessageid"
	"channel-helper-go/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (_u *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *PostUpdate) SetType(v post.Type) *PostUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PostUpdate) SetNillableType(v *post.Type) *PostUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *PostUpdate) SetFileID(v string) *PostUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *PostUpdate) SetNillableFileID(v *string) *PostUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// SetIsSent sets the "is_sent" field.
func (_u *PostUpdate) SetIsSent(v bool) *PostUpdate {
	_u.mutation.SetIsSent(v)
	return _u
}

// SetNillableIsSent sets the "is_sent" field if the given value is not nil.
func (_u *PostUpdate) SetNillableIsSent(v *bool) *PostUpdate {
	if v != nil {
		_u.SetIsSent(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *PostUpdate) SetCreatedAt(v time.Time) *PostUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *PostUpdate) SetNillableCreatedAt(v *time.Time) *PostUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetSentAt sets the "sent_at" field.
func (_u *PostUpdate) SetSentAt(v time.Time) *PostUpdate {
	_u.mutation.SetSentAt(v)
	return _u
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (_u *PostUpdate) SetNillableSentAt(v *time.Time) *PostUpdate {
	if v != nil {
		_u.SetSentAt(*v)
	}
	return _u
}

// ClearSentAt clears the value of the "sent_at" field.
func (_u *PostUpdate) ClearSentAt() *PostUpdate {
	_u.mutation.ClearSentAt()
	return _u
}

// AddMessageIDIDs adds the "message_ids" edge to the PostMessageId entity by IDs.
func (_u *PostUpdate) AddMessageIDIDs(ids ...int) *PostUpdate {
	_u.mutation.AddMessageIDIDs(ids...)
	return _u
}

// AddMessageIds adds the "message_ids" edges to the PostMessageId entity.
func (_u *PostUpdate) AddMessageIds(v ...*PostMessageId) *PostUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDIDs(ids...)
}

// SetImageHashID sets the "image_hash" edge to the ImageHash entity by ID.
func (_u *PostUpdate) SetImageHashID(id int) *PostUpdate {
	_u.mutation.SetImageHashID(id)
	return _u
}

// SetNillableImageHashID sets the "image_hash" edge to the ImageHash entity by ID if the given value is not nil.
func (_u *PostUpdate) SetNillableImageHashID(id *int) *PostUpdate {
	if id != nil {
		_u = _u.SetImageHashID(*id)
	}
	return _u
}

// SetImageHash sets the "image_hash" edge to the ImageHash entity.
func (_u *PostUpdate) SetImageHash(v *ImageHash) *PostUpdate {
	return _u.SetImageHashID(v.ID)
}

// Mutation returns the PostMutation object of the builder.
func (_u *PostUpdate) Mutation() *PostMutation {
	return _u.mutation
}

// ClearMessageIds clears all "message_ids" edges to the PostMessageId entity.
func (_u *PostUpdate) ClearMessageIds() *PostUpdate {
	_u.mutation.ClearMessageIds()
	return _u
}

// RemoveMessageIDIDs removes the "message_ids" edge to PostMessageId entities by IDs.
func (_u *PostUpdate) RemoveMessageIDIDs(ids ...int) *PostUpdate {
	_u.mutation.RemoveMessageIDIDs(ids...)
	return _u
}

// RemoveMessageIds removes "message_ids" edges to PostMessageId entities.
func (_u *PostUpdate) RemoveMessageIds(v ...*PostMessageId) *PostUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDIDs(ids...)
}

// ClearImageHash clears the "image_hash" edge to the ImageHash entity.
func (_u *PostUpdate) ClearImageHash() *PostUpdate {
	_u.mutation.ClearImageHash()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PostUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PostUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PostUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := post.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Post.type": %w`, err)}
		}
	}
	return nil
}

func (_u *PostUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(post.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(post.FieldFileID, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsSent(); ok {
		_spec.SetField(post.FieldIsSent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SentAt(); ok {
		_spec.SetField(post.FieldSentAt, field.TypeTime, value)
	}
	if _u.mutation.SentAtCleared() {
		_spec.ClearField(post.FieldSentAt, field.TypeTime)
	}
	if _u.mutation.MessageIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessageIdsIDs(); len(nodes) > 0 && !_u.mutation.MessageIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessageIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImageHashCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   post.ImageHashTable,
			Columns: []string{post.ImageHashColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImageHashIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   post.ImageHashTable,
			Columns: []string{post.ImageHashColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetType sets the "type" field.
func (_u *PostUpdateOne) SetType(v post.Type) *PostUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableType(v *post.Type) *PostUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *PostUpdateOne) SetFileID(v string) *PostUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableFileID(v *string) *PostUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// SetIsSent sets the "is_sent" field.
func (_u *PostUpdateOne) SetIsSent(v bool) *PostUpdateOne {
	_u.mutation.SetIsSent(v)
	return _u
}

// SetNillableIsSent sets the "is_sent" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableIsSent(v *bool) *PostUpdateOne {
	if v != nil {
		_u.SetIsSent(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *PostUpdateOne) SetCreatedAt(v time.Time) *PostUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableCreatedAt(v *time.Time) *PostUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetSentAt sets the "sent_at" field.
func (_u *PostUpdateOne) SetSentAt(v time.Time) *PostUpdateOne {
	_u.mutation.SetSentAt(v)
	return _u
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableSentAt(v *time.Time) *PostUpdateOne {
	if v != nil {
		_u.SetSentAt(*v)
	}
	return _u
}

// ClearSentAt clears the value of the "sent_at" field.
func (_u *PostUpdateOne) ClearSentAt() *PostUpdateOne {
	_u.mutation.ClearSentAt()
	return _u
}

// AddMessageIDIDs adds the "message_ids" edge to the PostMessageId entity by IDs.
func (_u *PostUpdateOne) AddMessageIDIDs(ids ...int) *PostUpdateOne {
	_u.mutation.AddMessageIDIDs(ids...)
	return _u
}

// AddMessageIds adds the "message_ids" edges to the PostMessageId entity.
func (_u *PostUpdateOne) AddMessageIds(v ...*PostMessageId) *PostUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMessageIDIDs(ids...)
}

// SetImageHashID sets the "image_hash" edge to the ImageHash entity by ID.
func (_u *PostUpdateOne) SetImageHashID(id int) *PostUpdateOne {
	_u.mutation.SetImageHashID(id)
	return _u
}

// SetNillableImageHashID sets the "image_hash" edge to the ImageHash entity by ID if the given value is not nil.
func (_u *PostUpdateOne) SetNillableImageHashID(id *int) *PostUpdateOne {
	if id != nil {
		_u = _u.SetImageHashID(*id)
	}
	return _u
}

// SetImageHash sets the "image_hash" edge to the ImageHash entity.
func (_u *PostUpdateOne) SetImageHash(v *ImageHash) *PostUpdateOne {
	return _u.SetImageHashID(v.ID)
}

// Mutation returns the PostMutation object of the builder.
func (_u *PostUpdateOne) Mutation() *PostMutation {
	return _u.mutation
}

// ClearMessageIds clears all "message_ids" edges to the PostMessageId entity.
func (_u *PostUpdateOne) ClearMessageIds() *PostUpdateOne {
	_u.mutation.ClearMessageIds()
	return _u
}

// RemoveMessageIDIDs removes the "message_ids" edge to PostMessageId entities by IDs.
func (_u *PostUpdateOne) RemoveMessageIDIDs(ids ...int) *PostUpdateOne {
	_u.mutation.RemoveMessageIDIDs(ids...)
	return _u
}

// RemoveMessageIds removes "message_ids" edges to PostMessageId entities.
func (_u *PostUpdateOne) RemoveMessageIds(v ...*PostMessageId) *PostUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMessageIDIDs(ids...)
}

// ClearImageHash clears the "image_hash" edge to the ImageHash entity.
func (_u *PostUpdateOne) ClearImageHash() *PostUpdateOne {
	_u.mutation.ClearImageHash()
	return _u
}

// Where appends a list predicates to the PostUpdate builder.
func (_u *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Post entity.
func (_u *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PostUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PostUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := post.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Post.type": %w`, err)}
		}
	}
	return nil
}

func (_u *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(post.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(post.FieldFileID, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsSent(); ok {
		_spec.SetField(post.FieldIsSent, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SentAt(); ok {
		_spec.SetField(post.FieldSentAt, field.TypeTime, value)
	}
	if _u.mutation.SentAtCleared() {
		_spec.ClearField(post.FieldSentAt, field.TypeTime)
	}
	if _u.mutation.MessageIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMessageIdsIDs(); len(nodes) > 0 && !_u.mutation.MessageIdsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessageIdsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MessageIdsTable,
			Columns: []string{post.MessageIdsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postmessageid.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ImageHashCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   post.ImageHashTable,
			Columns: []string{post.ImageHashColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ImageHashIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   post.ImageHashTable,
			Columns: []string{post.ImageHashColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
