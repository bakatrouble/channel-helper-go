// Code generated by ent, DO NOT EDIT.

package imagehash

import (
	"channel-helper-go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldLTE(FieldID, id))
}

// ImageHash applies equality check predicate on the "image_hash" field. It's identical to ImageHashEQ.
func ImageHash(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldEQ(FieldImageHash, v))
}

// ImageHashEQ applies the EQ predicate on the "image_hash" field.
func ImageHashEQ(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldEQ(FieldImageHash, v))
}

// ImageHashNEQ applies the NEQ predicate on the "image_hash" field.
func ImageHashNEQ(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldNEQ(FieldImageHash, v))
}

// ImageHashIn applies the In predicate on the "image_hash" field.
func ImageHashIn(vs ...string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldIn(FieldImageHash, vs...))
}

// ImageHashNotIn applies the NotIn predicate on the "image_hash" field.
func ImageHashNotIn(vs ...string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldNotIn(FieldImageHash, vs...))
}

// ImageHashGT applies the GT predicate on the "image_hash" field.
func ImageHashGT(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldGT(FieldImageHash, v))
}

// ImageHashGTE applies the GTE predicate on the "image_hash" field.
func ImageHashGTE(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldGTE(FieldImageHash, v))
}

// ImageHashLT applies the LT predicate on the "image_hash" field.
func ImageHashLT(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldLT(FieldImageHash, v))
}

// ImageHashLTE applies the LTE predicate on the "image_hash" field.
func ImageHashLTE(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldLTE(FieldImageHash, v))
}

// ImageHashContains applies the Contains predicate on the "image_hash" field.
func ImageHashContains(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldContains(FieldImageHash, v))
}

// ImageHashHasPrefix applies the HasPrefix predicate on the "image_hash" field.
func ImageHashHasPrefix(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldHasPrefix(FieldImageHash, v))
}

// ImageHashHasSuffix applies the HasSuffix predicate on the "image_hash" field.
func ImageHashHasSuffix(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldHasSuffix(FieldImageHash, v))
}

// ImageHashEqualFold applies the EqualFold predicate on the "image_hash" field.
func ImageHashEqualFold(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldEqualFold(FieldImageHash, v))
}

// ImageHashContainsFold applies the ContainsFold predicate on the "image_hash" field.
func ImageHashContainsFold(v string) predicate.ImageHash {
	return predicate.ImageHash(sql.FieldContainsFold(FieldImageHash, v))
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.ImageHash {
	return predicate.ImageHash(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.ImageHash {
	return predicate.ImageHash(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUploadTask applies the HasEdge predicate on the "upload_task" edge.
func HasUploadTask() predicate.ImageHash {
	return predicate.ImageHash(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UploadTaskTable, UploadTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploadTaskWith applies the HasEdge predicate on the "upload_task" edge with a given conditions (other predicates).
func HasUploadTaskWith(preds ...predicate.UploadTask) predicate.ImageHash {
	return predicate.ImageHash(func(s *sql.Selector) {
		step := newUploadTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImageHash) predicate.ImageHash {
	return predicate.ImageHash(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImageHash) predicate.ImageHash {
	return predicate.ImageHash(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImageHash) predicate.ImageHash {
	return predicate.ImageHash(sql.NotPredicates(p))
}
