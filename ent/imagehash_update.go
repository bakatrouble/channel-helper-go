// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/imagehash"
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/predicate"
	"channel-helper-go/ent/uploadtask"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// ImageHashUpdate is the builder for updating ImageHash entities.
type ImageHashUpdate struct {
	config
	hooks    []Hook
	mutation *ImageHashMutation
}

// Where appends a list predicates to the ImageHashUpdate builder.
func (_u *ImageHashUpdate) Where(ps ...predicate.ImageHash) *ImageHashUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetImageHash sets the "image_hash" field.
func (_u *ImageHashUpdate) SetImageHash(v string) *ImageHashUpdate {
	_u.mutation.SetImageHash(v)
	return _u
}

// SetNillableImageHash sets the "image_hash" field if the given value is not nil.
func (_u *ImageHashUpdate) SetNillableImageHash(v *string) *ImageHashUpdate {
	if v != nil {
		_u.SetImageHash(*v)
	}
	return _u
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (_u *ImageHashUpdate) SetPostID(id uuidv7.UUID) *ImageHashUpdate {
	_u.mutation.SetPostID(id)
	return _u
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (_u *ImageHashUpdate) SetNillablePostID(id *uuidv7.UUID) *ImageHashUpdate {
	if id != nil {
		_u = _u.SetPostID(*id)
	}
	return _u
}

// SetPost sets the "post" edge to the Post entity.
func (_u *ImageHashUpdate) SetPost(v *Post) *ImageHashUpdate {
	return _u.SetPostID(v.ID)
}

// SetUploadTaskID sets the "upload_task" edge to the UploadTask entity by ID.
func (_u *ImageHashUpdate) SetUploadTaskID(id uuidv7.UUID) *ImageHashUpdate {
	_u.mutation.SetUploadTaskID(id)
	return _u
}

// SetNillableUploadTaskID sets the "upload_task" edge to the UploadTask entity by ID if the given value is not nil.
func (_u *ImageHashUpdate) SetNillableUploadTaskID(id *uuidv7.UUID) *ImageHashUpdate {
	if id != nil {
		_u = _u.SetUploadTaskID(*id)
	}
	return _u
}

// SetUploadTask sets the "upload_task" edge to the UploadTask entity.
func (_u *ImageHashUpdate) SetUploadTask(v *UploadTask) *ImageHashUpdate {
	return _u.SetUploadTaskID(v.ID)
}

// Mutation returns the ImageHashMutation object of the builder.
func (_u *ImageHashUpdate) Mutation() *ImageHashMutation {
	return _u.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (_u *ImageHashUpdate) ClearPost() *ImageHashUpdate {
	_u.mutation.ClearPost()
	return _u
}

// ClearUploadTask clears the "upload_task" edge to the UploadTask entity.
func (_u *ImageHashUpdate) ClearUploadTask() *ImageHashUpdate {
	_u.mutation.ClearUploadTask()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ImageHashUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImageHashUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ImageHashUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImageHashUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImageHashUpdate) check() error {
	if v, ok := _u.mutation.ImageHash(); ok {
		if err := imagehash.ImageHashValidator(v); err != nil {
			return &ValidationError{Name: "image_hash", err: fmt.Errorf(`ent: validator failed for field "ImageHash.image_hash": %w`, err)}
		}
	}
	return nil
}

func (_u *ImageHashUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagehash.Table, imagehash.Columns, sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ImageHash(); ok {
		_spec.SetField(imagehash.FieldImageHash, field.TypeString, value)
	}
	if _u.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.PostTable,
			Columns: []string{imagehash.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.PostTable,
			Columns: []string{imagehash.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UploadTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.UploadTaskTable,
			Columns: []string{imagehash.UploadTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UploadTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.UploadTaskTable,
			Columns: []string{imagehash.UploadTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagehash.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ImageHashUpdateOne is the builder for updating a single ImageHash entity.
type ImageHashUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageHashMutation
}

// SetImageHash sets the "image_hash" field.
func (_u *ImageHashUpdateOne) SetImageHash(v string) *ImageHashUpdateOne {
	_u.mutation.SetImageHash(v)
	return _u
}

// SetNillableImageHash sets the "image_hash" field if the given value is not nil.
func (_u *ImageHashUpdateOne) SetNillableImageHash(v *string) *ImageHashUpdateOne {
	if v != nil {
		_u.SetImageHash(*v)
	}
	return _u
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (_u *ImageHashUpdateOne) SetPostID(id uuidv7.UUID) *ImageHashUpdateOne {
	_u.mutation.SetPostID(id)
	return _u
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (_u *ImageHashUpdateOne) SetNillablePostID(id *uuidv7.UUID) *ImageHashUpdateOne {
	if id != nil {
		_u = _u.SetPostID(*id)
	}
	return _u
}

// SetPost sets the "post" edge to the Post entity.
func (_u *ImageHashUpdateOne) SetPost(v *Post) *ImageHashUpdateOne {
	return _u.SetPostID(v.ID)
}

// SetUploadTaskID sets the "upload_task" edge to the UploadTask entity by ID.
func (_u *ImageHashUpdateOne) SetUploadTaskID(id uuidv7.UUID) *ImageHashUpdateOne {
	_u.mutation.SetUploadTaskID(id)
	return _u
}

// SetNillableUploadTaskID sets the "upload_task" edge to the UploadTask entity by ID if the given value is not nil.
func (_u *ImageHashUpdateOne) SetNillableUploadTaskID(id *uuidv7.UUID) *ImageHashUpdateOne {
	if id != nil {
		_u = _u.SetUploadTaskID(*id)
	}
	return _u
}

// SetUploadTask sets the "upload_task" edge to the UploadTask entity.
func (_u *ImageHashUpdateOne) SetUploadTask(v *UploadTask) *ImageHashUpdateOne {
	return _u.SetUploadTaskID(v.ID)
}

// Mutation returns the ImageHashMutation object of the builder.
func (_u *ImageHashUpdateOne) Mutation() *ImageHashMutation {
	return _u.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (_u *ImageHashUpdateOne) ClearPost() *ImageHashUpdateOne {
	_u.mutation.ClearPost()
	return _u
}

// ClearUploadTask clears the "upload_task" edge to the UploadTask entity.
func (_u *ImageHashUpdateOne) ClearUploadTask() *ImageHashUpdateOne {
	_u.mutation.ClearUploadTask()
	return _u
}

// Where appends a list predicates to the ImageHashUpdate builder.
func (_u *ImageHashUpdateOne) Where(ps ...predicate.ImageHash) *ImageHashUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ImageHashUpdateOne) Select(field string, fields ...string) *ImageHashUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ImageHash entity.
func (_u *ImageHashUpdateOne) Save(ctx context.Context) (*ImageHash, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ImageHashUpdateOne) SaveX(ctx context.Context) *ImageHash {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ImageHashUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ImageHashUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ImageHashUpdateOne) check() error {
	if v, ok := _u.mutation.ImageHash(); ok {
		if err := imagehash.ImageHashValidator(v); err != nil {
			return &ValidationError{Name: "image_hash", err: fmt.Errorf(`ent: validator failed for field "ImageHash.image_hash": %w`, err)}
		}
	}
	return nil
}

func (_u *ImageHashUpdateOne) sqlSave(ctx context.Context) (_node *ImageHash, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagehash.Table, imagehash.Columns, sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageHash.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagehash.FieldID)
		for _, f := range fields {
			if !imagehash.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagehash.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ImageHash(); ok {
		_spec.SetField(imagehash.FieldImageHash, field.TypeString, value)
	}
	if _u.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.PostTable,
			Columns: []string{imagehash.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.PostTable,
			Columns: []string{imagehash.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UploadTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.UploadTaskTable,
			Columns: []string{imagehash.UploadTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadtask.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UploadTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.UploadTaskTable,
			Columns: []string{imagehash.UploadTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageHash{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagehash.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
