// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/imagehash"
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/uploadtask"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// ImageHash is the model entity for the ImageHash schema.
type ImageHash struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ImageHash holds the value of the "image_hash" field.
	ImageHash string `json:"image_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageHashQuery when eager-loading is set.
	Edges                  ImageHashEdges `json:"edges"`
	post_image_hash        *uuidv7.UUID
	upload_task_image_hash *uuidv7.UUID
	selectValues           sql.SelectValues
}

// ImageHashEdges holds the relations/edges for other nodes in the graph.
type ImageHashEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// UploadTask holds the value of the upload_task edge.
	UploadTask *UploadTask `json:"upload_task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageHashEdges) PostOrErr() (*Post, error) {
	if e.Post != nil {
		return e.Post, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: post.Label}
	}
	return nil, &NotLoadedError{edge: "post"}
}

// UploadTaskOrErr returns the UploadTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageHashEdges) UploadTaskOrErr() (*UploadTask, error) {
	if e.UploadTask != nil {
		return e.UploadTask, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: uploadtask.Label}
	}
	return nil, &NotLoadedError{edge: "upload_task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageHash) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagehash.FieldID:
			values[i] = new(sql.NullInt64)
		case imagehash.FieldImageHash:
			values[i] = new(sql.NullString)
		case imagehash.ForeignKeys[0]: // post_image_hash
			values[i] = &sql.NullScanner{S: new(uuidv7.UUID)}
		case imagehash.ForeignKeys[1]: // upload_task_image_hash
			values[i] = &sql.NullScanner{S: new(uuidv7.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageHash fields.
func (_m *ImageHash) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagehash.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case imagehash.FieldImageHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_hash", values[i])
			} else if value.Valid {
				_m.ImageHash = value.String
			}
		case imagehash.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field post_image_hash", values[i])
			} else if value.Valid {
				_m.post_image_hash = new(uuidv7.UUID)
				*_m.post_image_hash = *value.S.(*uuidv7.UUID)
			}
		case imagehash.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field upload_task_image_hash", values[i])
			} else if value.Valid {
				_m.upload_task_image_hash = new(uuidv7.UUID)
				*_m.upload_task_image_hash = *value.S.(*uuidv7.UUID)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageHash.
// This includes values selected through modifiers, order, etc.
func (_m *ImageHash) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the ImageHash entity.
func (_m *ImageHash) QueryPost() *PostQuery {
	return NewImageHashClient(_m.config).QueryPost(_m)
}

// QueryUploadTask queries the "upload_task" edge of the ImageHash entity.
func (_m *ImageHash) QueryUploadTask() *UploadTaskQuery {
	return NewImageHashClient(_m.config).QueryUploadTask(_m)
}

// Update returns a builder for updating this ImageHash.
// Note that you need to call ImageHash.Unwrap() before calling this method if this ImageHash
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImageHash) Update() *ImageHashUpdateOne {
	return NewImageHashClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImageHash entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImageHash) Unwrap() *ImageHash {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImageHash is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImageHash) String() string {
	var builder strings.Builder
	builder.WriteString("ImageHash(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("image_hash=")
	builder.WriteString(_m.ImageHash)
	builder.WriteByte(')')
	return builder.String()
}

// ImageHashes is a parsable slice of ImageHash.
type ImageHashes []*ImageHash
