// Code generated by ent, DO NOT EDIT.

package post

import (
	"channel-helper-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// ID filters vertices based on their ID field.
func ID(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuidv7.UUID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldFileID, v))
}

// IsSent applies equality check predicate on the "is_sent" field. It's identical to IsSentEQ.
func IsSent(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIsSent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSentAt, v))
}

// ImageHash applies equality check predicate on the "image_hash" field. It's identical to ImageHashEQ.
func ImageHash(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldImageHash, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldType, vs...))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldFileID, v))
}

// FileIDContains applies the Contains predicate on the "file_id" field.
func FileIDContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldFileID, v))
}

// FileIDHasPrefix applies the HasPrefix predicate on the "file_id" field.
func FileIDHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldFileID, v))
}

// FileIDHasSuffix applies the HasSuffix predicate on the "file_id" field.
func FileIDHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldFileID, v))
}

// FileIDEqualFold applies the EqualFold predicate on the "file_id" field.
func FileIDEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldFileID, v))
}

// FileIDContainsFold applies the ContainsFold predicate on the "file_id" field.
func FileIDContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldFileID, v))
}

// IsSentEQ applies the EQ predicate on the "is_sent" field.
func IsSentEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIsSent, v))
}

// IsSentNEQ applies the NEQ predicate on the "is_sent" field.
func IsSentNEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldIsSent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldSentAt, v))
}

// SentAtIsNil applies the IsNil predicate on the "sent_at" field.
func SentAtIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldSentAt))
}

// SentAtNotNil applies the NotNil predicate on the "sent_at" field.
func SentAtNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldSentAt))
}

// ImageHashEQ applies the EQ predicate on the "image_hash" field.
func ImageHashEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldImageHash, v))
}

// ImageHashNEQ applies the NEQ predicate on the "image_hash" field.
func ImageHashNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldImageHash, v))
}

// ImageHashIn applies the In predicate on the "image_hash" field.
func ImageHashIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldImageHash, vs...))
}

// ImageHashNotIn applies the NotIn predicate on the "image_hash" field.
func ImageHashNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldImageHash, vs...))
}

// ImageHashGT applies the GT predicate on the "image_hash" field.
func ImageHashGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldImageHash, v))
}

// ImageHashGTE applies the GTE predicate on the "image_hash" field.
func ImageHashGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldImageHash, v))
}

// ImageHashLT applies the LT predicate on the "image_hash" field.
func ImageHashLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldImageHash, v))
}

// ImageHashLTE applies the LTE predicate on the "image_hash" field.
func ImageHashLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldImageHash, v))
}

// ImageHashContains applies the Contains predicate on the "image_hash" field.
func ImageHashContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldImageHash, v))
}

// ImageHashHasPrefix applies the HasPrefix predicate on the "image_hash" field.
func ImageHashHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldImageHash, v))
}

// ImageHashHasSuffix applies the HasSuffix predicate on the "image_hash" field.
func ImageHashHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldImageHash, v))
}

// ImageHashIsNil applies the IsNil predicate on the "image_hash" field.
func ImageHashIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldImageHash))
}

// ImageHashNotNil applies the NotNil predicate on the "image_hash" field.
func ImageHashNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldImageHash))
}

// ImageHashEqualFold applies the EqualFold predicate on the "image_hash" field.
func ImageHashEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldImageHash, v))
}

// ImageHashContainsFold applies the ContainsFold predicate on the "image_hash" field.
func ImageHashContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldImageHash, v))
}

// HasMessageIds applies the HasEdge predicate on the "message_ids" edge.
func HasMessageIds() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessageIdsTable, MessageIdsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageIdsWith applies the HasEdge predicate on the "message_ids" edge with a given conditions (other predicates).
func HasMessageIdsWith(preds ...predicate.PostMessageId) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newMessageIdsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
