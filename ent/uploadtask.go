// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/uploadtask"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// UploadTask is the model entity for the UploadTask schema.
type UploadTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuidv7.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type uploadtask.Type `json:"type,omitempty"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
	// IsProcessed holds the value of the "is_processed" field.
	IsProcessed bool `json:"is_processed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// ImageHash holds the value of the "image_hash" field.
	ImageHash    string `json:"image_hash,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UploadTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uploadtask.FieldData:
			values[i] = new([]byte)
		case uploadtask.FieldIsProcessed:
			values[i] = new(sql.NullBool)
		case uploadtask.FieldType, uploadtask.FieldImageHash:
			values[i] = new(sql.NullString)
		case uploadtask.FieldCreatedAt, uploadtask.FieldSentAt:
			values[i] = new(sql.NullTime)
		case uploadtask.FieldID:
			values[i] = new(uuidv7.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UploadTask fields.
func (_m *UploadTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uploadtask.FieldID:
			if value, ok := values[i].(*uuidv7.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case uploadtask.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = uploadtask.Type(value.String)
			}
		case uploadtask.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				_m.Data = *value
			}
		case uploadtask.FieldIsProcessed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_processed", values[i])
			} else if value.Valid {
				_m.IsProcessed = value.Bool
			}
		case uploadtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case uploadtask.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				_m.SentAt = value.Time
			}
		case uploadtask.FieldImageHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_hash", values[i])
			} else if value.Valid {
				_m.ImageHash = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UploadTask.
// This includes values selected through modifiers, order, etc.
func (_m *UploadTask) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this UploadTask.
// Note that you need to call UploadTask.Unwrap() before calling this method if this UploadTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UploadTask) Update() *UploadTaskUpdateOne {
	return NewUploadTaskClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UploadTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UploadTask) Unwrap() *UploadTask {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UploadTask is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UploadTask) String() string {
	var builder strings.Builder
	builder.WriteString("UploadTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", _m.Data))
	builder.WriteString(", ")
	builder.WriteString("is_processed=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsProcessed))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(_m.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image_hash=")
	builder.WriteString(_m.ImageHash)
	builder.WriteByte(')')
	return builder.String()
}

// UploadTasks is a parsable slice of UploadTask.
type UploadTasks []*UploadTask
