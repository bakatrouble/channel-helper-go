// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/imagehash"
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/uploadtask"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// ImageHashCreate is the builder for creating a ImageHash entity.
type ImageHashCreate struct {
	config
	mutation *ImageHashMutation
	hooks    []Hook
}

// SetImageHash sets the "image_hash" field.
func (_c *ImageHashCreate) SetImageHash(v string) *ImageHashCreate {
	_c.mutation.SetImageHash(v)
	return _c
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (_c *ImageHashCreate) SetPostID(id uuidv7.UUID) *ImageHashCreate {
	_c.mutation.SetPostID(id)
	return _c
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (_c *ImageHashCreate) SetNillablePostID(id *uuidv7.UUID) *ImageHashCreate {
	if id != nil {
		_c = _c.SetPostID(*id)
	}
	return _c
}

// SetPost sets the "post" edge to the Post entity.
func (_c *ImageHashCreate) SetPost(v *Post) *ImageHashCreate {
	return _c.SetPostID(v.ID)
}

// SetUploadTaskID sets the "upload_task" edge to the UploadTask entity by ID.
func (_c *ImageHashCreate) SetUploadTaskID(id uuidv7.UUID) *ImageHashCreate {
	_c.mutation.SetUploadTaskID(id)
	return _c
}

// SetNillableUploadTaskID sets the "upload_task" edge to the UploadTask entity by ID if the given value is not nil.
func (_c *ImageHashCreate) SetNillableUploadTaskID(id *uuidv7.UUID) *ImageHashCreate {
	if id != nil {
		_c = _c.SetUploadTaskID(*id)
	}
	return _c
}

// SetUploadTask sets the "upload_task" edge to the UploadTask entity.
func (_c *ImageHashCreate) SetUploadTask(v *UploadTask) *ImageHashCreate {
	return _c.SetUploadTaskID(v.ID)
}

// Mutation returns the ImageHashMutation object of the builder.
func (_c *ImageHashCreate) Mutation() *ImageHashMutation {
	return _c.mutation
}

// Save creates the ImageHash in the database.
func (_c *ImageHashCreate) Save(ctx context.Context) (*ImageHash, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ImageHashCreate) SaveX(ctx context.Context) *ImageHash {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImageHashCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImageHashCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ImageHashCreate) check() error {
	if _, ok := _c.mutation.ImageHash(); !ok {
		return &ValidationError{Name: "image_hash", err: errors.New(`ent: missing required field "ImageHash.image_hash"`)}
	}
	if v, ok := _c.mutation.ImageHash(); ok {
		if err := imagehash.ImageHashValidator(v); err != nil {
			return &ValidationError{Name: "image_hash", err: fmt.Errorf(`ent: validator failed for field "ImageHash.image_hash": %w`, err)}
		}
	}
	return nil
}

func (_c *ImageHashCreate) sqlSave(ctx context.Context) (*ImageHash, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ImageHashCreate) createSpec() (*ImageHash, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageHash{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(imagehash.Table, sqlgraph.NewFieldSpec(imagehash.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ImageHash(); ok {
		_spec.SetField(imagehash.FieldImageHash, field.TypeString, value)
		_node.ImageHash = value
	}
	if nodes := _c.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.PostTable,
			Columns: []string{imagehash.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_image_hash = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UploadTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   imagehash.UploadTaskTable,
			Columns: []string{imagehash.UploadTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(uploadtask.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.upload_task_image_hash = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageHashCreateBulk is the builder for creating many ImageHash entities in bulk.
type ImageHashCreateBulk struct {
	config
	err      error
	builders []*ImageHashCreate
}

// Save creates the ImageHash entities in the database.
func (_c *ImageHashCreateBulk) Save(ctx context.Context) ([]*ImageHash, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ImageHash, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageHashMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ImageHashCreateBulk) SaveX(ctx context.Context) []*ImageHash {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImageHashCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImageHashCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
