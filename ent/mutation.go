// Code generated by ent, DO NOT EDIT.

package ent

import (
	"channel-helper-go/ent/post"
	"channel-helper-go/ent/postmessageid"
	"channel-helper-go/ent/predicate"
	"channel-helper-go/ent/uploadtask"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuidv7 "github.com/moroz/uuidv7-go"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePost          = "Post"
	TypePostMessageId = "PostMessageId"
	TypeUploadTask    = "UploadTask"
)

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuidv7.UUID
	_type              *post.Type
	file_id            *string
	is_sent            *bool
	created_at         *time.Time
	sent_at            *time.Time
	image_hash         *string
	clearedFields      map[string]struct{}
	message_ids        map[int]struct{}
	removedmessage_ids map[int]struct{}
	clearedmessage_ids bool
	done               bool
	oldValue           func(context.Context) (*Post, error)
	predicates         []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id uuidv7.UUID) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Post entities.
func (m *PostMutation) SetID(id uuidv7.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id uuidv7.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]uuidv7.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuidv7.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *PostMutation) SetType(po post.Type) {
	m._type = &po
}

// GetType returns the value of the "type" field in the mutation.
func (m *PostMutation) GetType() (r post.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldType(ctx context.Context) (v post.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PostMutation) ResetType() {
	m._type = nil
}

// SetFileID sets the "file_id" field.
func (m *PostMutation) SetFileID(s string) {
	m.file_id = &s
}

// FileID returns the value of the "file_id" field in the mutation.
func (m *PostMutation) FileID() (r string, exists bool) {
	v := m.file_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFileID returns the old "file_id" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldFileID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileID: %w", err)
	}
	return oldValue.FileID, nil
}

// ResetFileID resets all changes to the "file_id" field.
func (m *PostMutation) ResetFileID() {
	m.file_id = nil
}

// SetIsSent sets the "is_sent" field.
func (m *PostMutation) SetIsSent(b bool) {
	m.is_sent = &b
}

// IsSent returns the value of the "is_sent" field in the mutation.
func (m *PostMutation) IsSent() (r bool, exists bool) {
	v := m.is_sent
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSent returns the old "is_sent" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldIsSent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSent: %w", err)
	}
	return oldValue.IsSent, nil
}

// ResetIsSent resets all changes to the "is_sent" field.
func (m *PostMutation) ResetIsSent() {
	m.is_sent = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PostMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetSentAt sets the "sent_at" field.
func (m *PostMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *PostMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ClearSentAt clears the value of the "sent_at" field.
func (m *PostMutation) ClearSentAt() {
	m.sent_at = nil
	m.clearedFields[post.FieldSentAt] = struct{}{}
}

// SentAtCleared returns if the "sent_at" field was cleared in this mutation.
func (m *PostMutation) SentAtCleared() bool {
	_, ok := m.clearedFields[post.FieldSentAt]
	return ok
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *PostMutation) ResetSentAt() {
	m.sent_at = nil
	delete(m.clearedFields, post.FieldSentAt)
}

// SetImageHash sets the "image_hash" field.
func (m *PostMutation) SetImageHash(s string) {
	m.image_hash = &s
}

// ImageHash returns the value of the "image_hash" field in the mutation.
func (m *PostMutation) ImageHash() (r string, exists bool) {
	v := m.image_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldImageHash returns the old "image_hash" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldImageHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageHash: %w", err)
	}
	return oldValue.ImageHash, nil
}

// ClearImageHash clears the value of the "image_hash" field.
func (m *PostMutation) ClearImageHash() {
	m.image_hash = nil
	m.clearedFields[post.FieldImageHash] = struct{}{}
}

// ImageHashCleared returns if the "image_hash" field was cleared in this mutation.
func (m *PostMutation) ImageHashCleared() bool {
	_, ok := m.clearedFields[post.FieldImageHash]
	return ok
}

// ResetImageHash resets all changes to the "image_hash" field.
func (m *PostMutation) ResetImageHash() {
	m.image_hash = nil
	delete(m.clearedFields, post.FieldImageHash)
}

// AddMessageIDIDs adds the "message_ids" edge to the PostMessageId entity by ids.
func (m *PostMutation) AddMessageIDIDs(ids ...int) {
	if m.message_ids == nil {
		m.message_ids = make(map[int]struct{})
	}
	for i := range ids {
		m.message_ids[ids[i]] = struct{}{}
	}
}

// ClearMessageIds clears the "message_ids" edge to the PostMessageId entity.
func (m *PostMutation) ClearMessageIds() {
	m.clearedmessage_ids = true
}

// MessageIdsCleared reports if the "message_ids" edge to the PostMessageId entity was cleared.
func (m *PostMutation) MessageIdsCleared() bool {
	return m.clearedmessage_ids
}

// RemoveMessageIDIDs removes the "message_ids" edge to the PostMessageId entity by IDs.
func (m *PostMutation) RemoveMessageIDIDs(ids ...int) {
	if m.removedmessage_ids == nil {
		m.removedmessage_ids = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.message_ids, ids[i])
		m.removedmessage_ids[ids[i]] = struct{}{}
	}
}

// RemovedMessageIds returns the removed IDs of the "message_ids" edge to the PostMessageId entity.
func (m *PostMutation) RemovedMessageIdsIDs() (ids []int) {
	for id := range m.removedmessage_ids {
		ids = append(ids, id)
	}
	return
}

// MessageIdsIDs returns the "message_ids" edge IDs in the mutation.
func (m *PostMutation) MessageIdsIDs() (ids []int) {
	for id := range m.message_ids {
		ids = append(ids, id)
	}
	return
}

// ResetMessageIds resets all changes to the "message_ids" edge.
func (m *PostMutation) ResetMessageIds() {
	m.message_ids = nil
	m.clearedmessage_ids = false
	m.removedmessage_ids = nil
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Post, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._type != nil {
		fields = append(fields, post.FieldType)
	}
	if m.file_id != nil {
		fields = append(fields, post.FieldFileID)
	}
	if m.is_sent != nil {
		fields = append(fields, post.FieldIsSent)
	}
	if m.created_at != nil {
		fields = append(fields, post.FieldCreatedAt)
	}
	if m.sent_at != nil {
		fields = append(fields, post.FieldSentAt)
	}
	if m.image_hash != nil {
		fields = append(fields, post.FieldImageHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldType:
		return m.GetType()
	case post.FieldFileID:
		return m.FileID()
	case post.FieldIsSent:
		return m.IsSent()
	case post.FieldCreatedAt:
		return m.CreatedAt()
	case post.FieldSentAt:
		return m.SentAt()
	case post.FieldImageHash:
		return m.ImageHash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldType:
		return m.OldType(ctx)
	case post.FieldFileID:
		return m.OldFileID(ctx)
	case post.FieldIsSent:
		return m.OldIsSent(ctx)
	case post.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case post.FieldSentAt:
		return m.OldSentAt(ctx)
	case post.FieldImageHash:
		return m.OldImageHash(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldType:
		v, ok := value.(post.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case post.FieldFileID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileID(v)
		return nil
	case post.FieldIsSent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSent(v)
		return nil
	case post.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case post.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	case post.FieldImageHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageHash(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(post.FieldSentAt) {
		fields = append(fields, post.FieldSentAt)
	}
	if m.FieldCleared(post.FieldImageHash) {
		fields = append(fields, post.FieldImageHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	switch name {
	case post.FieldSentAt:
		m.ClearSentAt()
		return nil
	case post.FieldImageHash:
		m.ClearImageHash()
		return nil
	}
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldType:
		m.ResetType()
		return nil
	case post.FieldFileID:
		m.ResetFileID()
		return nil
	case post.FieldIsSent:
		m.ResetIsSent()
		return nil
	case post.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case post.FieldSentAt:
		m.ResetSentAt()
		return nil
	case post.FieldImageHash:
		m.ResetImageHash()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.message_ids != nil {
		edges = append(edges, post.EdgeMessageIds)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeMessageIds:
		ids := make([]ent.Value, 0, len(m.message_ids))
		for id := range m.message_ids {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmessage_ids != nil {
		edges = append(edges, post.EdgeMessageIds)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeMessageIds:
		ids := make([]ent.Value, 0, len(m.removedmessage_ids))
		for id := range m.removedmessage_ids {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessage_ids {
		edges = append(edges, post.EdgeMessageIds)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	switch name {
	case post.EdgeMessageIds:
		return m.clearedmessage_ids
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	switch name {
	case post.EdgeMessageIds:
		m.ResetMessageIds()
		return nil
	}
	return fmt.Errorf("unknown Post edge %s", name)
}

// PostMessageIdMutation represents an operation that mutates the PostMessageId nodes in the graph.
type PostMessageIdMutation struct {
	config
	op            Op
	typ           string
	id            *int
	chat_id       *int64
	addchat_id    *int64
	message_id    *int
	addmessage_id *int
	clearedFields map[string]struct{}
	post          *uuidv7.UUID
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*PostMessageId, error)
	predicates    []predicate.PostMessageId
}

var _ ent.Mutation = (*PostMessageIdMutation)(nil)

// postmessageidOption allows management of the mutation configuration using functional options.
type postmessageidOption func(*PostMessageIdMutation)

// newPostMessageIdMutation creates new mutation for the PostMessageId entity.
func newPostMessageIdMutation(c config, op Op, opts ...postmessageidOption) *PostMessageIdMutation {
	m := &PostMessageIdMutation{
		config:        c,
		op:            op,
		typ:           TypePostMessageId,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostMessageIdID sets the ID field of the mutation.
func withPostMessageIdID(id int) postmessageidOption {
	return func(m *PostMessageIdMutation) {
		var (
			err   error
			once  sync.Once
			value *PostMessageId
		)
		m.oldValue = func(ctx context.Context) (*PostMessageId, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PostMessageId.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPostMessageId sets the old PostMessageId of the mutation.
func withPostMessageId(node *PostMessageId) postmessageidOption {
	return func(m *PostMessageIdMutation) {
		m.oldValue = func(context.Context) (*PostMessageId, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMessageIdMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMessageIdMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMessageIdMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMessageIdMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PostMessageId.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *PostMessageIdMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *PostMessageIdMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the PostMessageId entity.
// If the PostMessageId object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMessageIdMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *PostMessageIdMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *PostMessageIdMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *PostMessageIdMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetMessageID sets the "message_id" field.
func (m *PostMessageIdMutation) SetMessageID(i int) {
	m.message_id = &i
	m.addmessage_id = nil
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *PostMessageIdMutation) MessageID() (r int, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the PostMessageId entity.
// If the PostMessageId object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMessageIdMutation) OldMessageID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// AddMessageID adds i to the "message_id" field.
func (m *PostMessageIdMutation) AddMessageID(i int) {
	if m.addmessage_id != nil {
		*m.addmessage_id += i
	} else {
		m.addmessage_id = &i
	}
}

// AddedMessageID returns the value that was added to the "message_id" field in this mutation.
func (m *PostMessageIdMutation) AddedMessageID() (r int, exists bool) {
	v := m.addmessage_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *PostMessageIdMutation) ResetMessageID() {
	m.message_id = nil
	m.addmessage_id = nil
}

// SetPostID sets the "post" edge to the Post entity by id.
func (m *PostMessageIdMutation) SetPostID(id uuidv7.UUID) {
	m.post = &id
}

// ClearPost clears the "post" edge to the Post entity.
func (m *PostMessageIdMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *PostMessageIdMutation) PostCleared() bool {
	return m.clearedpost
}

// PostID returns the "post" edge ID in the mutation.
func (m *PostMessageIdMutation) PostID() (id uuidv7.UUID, exists bool) {
	if m.post != nil {
		return *m.post, true
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *PostMessageIdMutation) PostIDs() (ids []uuidv7.UUID) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *PostMessageIdMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the PostMessageIdMutation builder.
func (m *PostMessageIdMutation) Where(ps ...predicate.PostMessageId) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PostMessageIdMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PostMessageIdMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PostMessageId, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PostMessageIdMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PostMessageIdMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PostMessageId).
func (m *PostMessageIdMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMessageIdMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.chat_id != nil {
		fields = append(fields, postmessageid.FieldChatID)
	}
	if m.message_id != nil {
		fields = append(fields, postmessageid.FieldMessageID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMessageIdMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case postmessageid.FieldChatID:
		return m.ChatID()
	case postmessageid.FieldMessageID:
		return m.MessageID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMessageIdMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case postmessageid.FieldChatID:
		return m.OldChatID(ctx)
	case postmessageid.FieldMessageID:
		return m.OldMessageID(ctx)
	}
	return nil, fmt.Errorf("unknown PostMessageId field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMessageIdMutation) SetField(name string, value ent.Value) error {
	switch name {
	case postmessageid.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case postmessageid.FieldMessageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	}
	return fmt.Errorf("unknown PostMessageId field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMessageIdMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, postmessageid.FieldChatID)
	}
	if m.addmessage_id != nil {
		fields = append(fields, postmessageid.FieldMessageID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMessageIdMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case postmessageid.FieldChatID:
		return m.AddedChatID()
	case postmessageid.FieldMessageID:
		return m.AddedMessageID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMessageIdMutation) AddField(name string, value ent.Value) error {
	switch name {
	case postmessageid.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	case postmessageid.FieldMessageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMessageID(v)
		return nil
	}
	return fmt.Errorf("unknown PostMessageId numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMessageIdMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMessageIdMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMessageIdMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PostMessageId nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMessageIdMutation) ResetField(name string) error {
	switch name {
	case postmessageid.FieldChatID:
		m.ResetChatID()
		return nil
	case postmessageid.FieldMessageID:
		m.ResetMessageID()
		return nil
	}
	return fmt.Errorf("unknown PostMessageId field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMessageIdMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.post != nil {
		edges = append(edges, postmessageid.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMessageIdMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case postmessageid.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMessageIdMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMessageIdMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMessageIdMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpost {
		edges = append(edges, postmessageid.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMessageIdMutation) EdgeCleared(name string) bool {
	switch name {
	case postmessageid.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMessageIdMutation) ClearEdge(name string) error {
	switch name {
	case postmessageid.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown PostMessageId unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMessageIdMutation) ResetEdge(name string) error {
	switch name {
	case postmessageid.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown PostMessageId edge %s", name)
}

// UploadTaskMutation represents an operation that mutates the UploadTask nodes in the graph.
type UploadTaskMutation struct {
	config
	op            Op
	typ           string
	id            *uuidv7.UUID
	_type         *uploadtask.Type
	data          *[]byte
	is_processed  *bool
	created_at    *time.Time
	sent_at       *time.Time
	image_hash    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UploadTask, error)
	predicates    []predicate.UploadTask
}

var _ ent.Mutation = (*UploadTaskMutation)(nil)

// uploadtaskOption allows management of the mutation configuration using functional options.
type uploadtaskOption func(*UploadTaskMutation)

// newUploadTaskMutation creates new mutation for the UploadTask entity.
func newUploadTaskMutation(c config, op Op, opts ...uploadtaskOption) *UploadTaskMutation {
	m := &UploadTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeUploadTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUploadTaskID sets the ID field of the mutation.
func withUploadTaskID(id uuidv7.UUID) uploadtaskOption {
	return func(m *UploadTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *UploadTask
		)
		m.oldValue = func(ctx context.Context) (*UploadTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UploadTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUploadTask sets the old UploadTask of the mutation.
func withUploadTask(node *UploadTask) uploadtaskOption {
	return func(m *UploadTaskMutation) {
		m.oldValue = func(context.Context) (*UploadTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UploadTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UploadTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UploadTask entities.
func (m *UploadTaskMutation) SetID(id uuidv7.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UploadTaskMutation) ID() (id uuidv7.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UploadTaskMutation) IDs(ctx context.Context) ([]uuidv7.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuidv7.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UploadTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *UploadTaskMutation) SetType(u uploadtask.Type) {
	m._type = &u
}

// GetType returns the value of the "type" field in the mutation.
func (m *UploadTaskMutation) GetType() (r uploadtask.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the UploadTask entity.
// If the UploadTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadTaskMutation) OldType(ctx context.Context) (v uploadtask.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UploadTaskMutation) ResetType() {
	m._type = nil
}

// SetData sets the "data" field.
func (m *UploadTaskMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *UploadTaskMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the UploadTask entity.
// If the UploadTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadTaskMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *UploadTaskMutation) ClearData() {
	m.data = nil
	m.clearedFields[uploadtask.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *UploadTaskMutation) DataCleared() bool {
	_, ok := m.clearedFields[uploadtask.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *UploadTaskMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, uploadtask.FieldData)
}

// SetIsProcessed sets the "is_processed" field.
func (m *UploadTaskMutation) SetIsProcessed(b bool) {
	m.is_processed = &b
}

// IsProcessed returns the value of the "is_processed" field in the mutation.
func (m *UploadTaskMutation) IsProcessed() (r bool, exists bool) {
	v := m.is_processed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsProcessed returns the old "is_processed" field's value of the UploadTask entity.
// If the UploadTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadTaskMutation) OldIsProcessed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsProcessed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsProcessed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsProcessed: %w", err)
	}
	return oldValue.IsProcessed, nil
}

// ResetIsProcessed resets all changes to the "is_processed" field.
func (m *UploadTaskMutation) ResetIsProcessed() {
	m.is_processed = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UploadTaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UploadTaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UploadTask entity.
// If the UploadTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadTaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UploadTaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetSentAt sets the "sent_at" field.
func (m *UploadTaskMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *UploadTaskMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the UploadTask entity.
// If the UploadTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadTaskMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ClearSentAt clears the value of the "sent_at" field.
func (m *UploadTaskMutation) ClearSentAt() {
	m.sent_at = nil
	m.clearedFields[uploadtask.FieldSentAt] = struct{}{}
}

// SentAtCleared returns if the "sent_at" field was cleared in this mutation.
func (m *UploadTaskMutation) SentAtCleared() bool {
	_, ok := m.clearedFields[uploadtask.FieldSentAt]
	return ok
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *UploadTaskMutation) ResetSentAt() {
	m.sent_at = nil
	delete(m.clearedFields, uploadtask.FieldSentAt)
}

// SetImageHash sets the "image_hash" field.
func (m *UploadTaskMutation) SetImageHash(s string) {
	m.image_hash = &s
}

// ImageHash returns the value of the "image_hash" field in the mutation.
func (m *UploadTaskMutation) ImageHash() (r string, exists bool) {
	v := m.image_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldImageHash returns the old "image_hash" field's value of the UploadTask entity.
// If the UploadTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadTaskMutation) OldImageHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageHash: %w", err)
	}
	return oldValue.ImageHash, nil
}

// ClearImageHash clears the value of the "image_hash" field.
func (m *UploadTaskMutation) ClearImageHash() {
	m.image_hash = nil
	m.clearedFields[uploadtask.FieldImageHash] = struct{}{}
}

// ImageHashCleared returns if the "image_hash" field was cleared in this mutation.
func (m *UploadTaskMutation) ImageHashCleared() bool {
	_, ok := m.clearedFields[uploadtask.FieldImageHash]
	return ok
}

// ResetImageHash resets all changes to the "image_hash" field.
func (m *UploadTaskMutation) ResetImageHash() {
	m.image_hash = nil
	delete(m.clearedFields, uploadtask.FieldImageHash)
}

// Where appends a list predicates to the UploadTaskMutation builder.
func (m *UploadTaskMutation) Where(ps ...predicate.UploadTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UploadTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UploadTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UploadTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UploadTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UploadTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UploadTask).
func (m *UploadTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UploadTaskMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._type != nil {
		fields = append(fields, uploadtask.FieldType)
	}
	if m.data != nil {
		fields = append(fields, uploadtask.FieldData)
	}
	if m.is_processed != nil {
		fields = append(fields, uploadtask.FieldIsProcessed)
	}
	if m.created_at != nil {
		fields = append(fields, uploadtask.FieldCreatedAt)
	}
	if m.sent_at != nil {
		fields = append(fields, uploadtask.FieldSentAt)
	}
	if m.image_hash != nil {
		fields = append(fields, uploadtask.FieldImageHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UploadTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case uploadtask.FieldType:
		return m.GetType()
	case uploadtask.FieldData:
		return m.Data()
	case uploadtask.FieldIsProcessed:
		return m.IsProcessed()
	case uploadtask.FieldCreatedAt:
		return m.CreatedAt()
	case uploadtask.FieldSentAt:
		return m.SentAt()
	case uploadtask.FieldImageHash:
		return m.ImageHash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UploadTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case uploadtask.FieldType:
		return m.OldType(ctx)
	case uploadtask.FieldData:
		return m.OldData(ctx)
	case uploadtask.FieldIsProcessed:
		return m.OldIsProcessed(ctx)
	case uploadtask.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case uploadtask.FieldSentAt:
		return m.OldSentAt(ctx)
	case uploadtask.FieldImageHash:
		return m.OldImageHash(ctx)
	}
	return nil, fmt.Errorf("unknown UploadTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case uploadtask.FieldType:
		v, ok := value.(uploadtask.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case uploadtask.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case uploadtask.FieldIsProcessed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsProcessed(v)
		return nil
	case uploadtask.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case uploadtask.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	case uploadtask.FieldImageHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageHash(v)
		return nil
	}
	return fmt.Errorf("unknown UploadTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UploadTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UploadTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UploadTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UploadTaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(uploadtask.FieldData) {
		fields = append(fields, uploadtask.FieldData)
	}
	if m.FieldCleared(uploadtask.FieldSentAt) {
		fields = append(fields, uploadtask.FieldSentAt)
	}
	if m.FieldCleared(uploadtask.FieldImageHash) {
		fields = append(fields, uploadtask.FieldImageHash)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UploadTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UploadTaskMutation) ClearField(name string) error {
	switch name {
	case uploadtask.FieldData:
		m.ClearData()
		return nil
	case uploadtask.FieldSentAt:
		m.ClearSentAt()
		return nil
	case uploadtask.FieldImageHash:
		m.ClearImageHash()
		return nil
	}
	return fmt.Errorf("unknown UploadTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UploadTaskMutation) ResetField(name string) error {
	switch name {
	case uploadtask.FieldType:
		m.ResetType()
		return nil
	case uploadtask.FieldData:
		m.ResetData()
		return nil
	case uploadtask.FieldIsProcessed:
		m.ResetIsProcessed()
		return nil
	case uploadtask.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case uploadtask.FieldSentAt:
		m.ResetSentAt()
		return nil
	case uploadtask.FieldImageHash:
		m.ResetImageHash()
		return nil
	}
	return fmt.Errorf("unknown UploadTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UploadTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UploadTaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UploadTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UploadTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UploadTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UploadTaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UploadTaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UploadTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UploadTaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UploadTask edge %s", name)
}
