// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"channel-helper-go/ent/migrate"

	"channel-helper-go/ent/post"
	"channel-helper-go/ent/postmessageid"
	"channel-helper-go/ent/uploadtask"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuidv7 "github.com/moroz/uuidv7-go"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// PostMessageId is the client for interacting with the PostMessageId builders.
	PostMessageId *PostMessageIdClient
	// UploadTask is the client for interacting with the UploadTask builders.
	UploadTask *UploadTaskClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Post = NewPostClient(c.config)
	c.PostMessageId = NewPostMessageIdClient(c.config)
	c.UploadTask = NewUploadTaskClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Post:          NewPostClient(cfg),
		PostMessageId: NewPostMessageIdClient(cfg),
		UploadTask:    NewUploadTaskClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Post:          NewPostClient(cfg),
		PostMessageId: NewPostMessageIdClient(cfg),
		UploadTask:    NewUploadTaskClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Post.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Post.Use(hooks...)
	c.PostMessageId.Use(hooks...)
	c.UploadTask.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Post.Intercept(interceptors...)
	c.PostMessageId.Intercept(interceptors...)
	c.UploadTask.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *PostMutation:
		return c.Post.mutate(ctx, m)
	case *PostMessageIdMutation:
		return c.PostMessageId.mutate(ctx, m)
	case *UploadTaskMutation:
		return c.UploadTask.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `post.Intercept(f(g(h())))`.
func (c *PostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Post = append(c.inters.Post, interceptors...)
}

// Create returns a builder for creating a Post entity.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PostClient) MapCreateBulk(slice any, setFunc func(*PostCreate, int)) *PostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PostCreateBulk{err: fmt.Errorf("calling to PostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(_m *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(_m))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id uuidv7.UUID) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostClient) DeleteOne(_m *Post) *PostDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostClient) DeleteOneID(id uuidv7.UUID) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePost},
		inters: c.Interceptors(),
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id uuidv7.UUID) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id uuidv7.UUID) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessageIds queries the message_ids edge of a Post.
func (c *PostClient) QueryMessageIds(_m *Post) *PostMessageIdQuery {
	query := (&PostMessageIdClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(postmessageid.Table, postmessageid.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.MessageIdsTable, post.MessageIdsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// Interceptors returns the client interceptors.
func (c *PostClient) Interceptors() []Interceptor {
	return c.inters.Post
}

func (c *PostClient) mutate(ctx context.Context, m *PostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Post mutation op: %q", m.Op())
	}
}

// PostMessageIdClient is a client for the PostMessageId schema.
type PostMessageIdClient struct {
	config
}

// NewPostMessageIdClient returns a client for the PostMessageId from the given config.
func NewPostMessageIdClient(c config) *PostMessageIdClient {
	return &PostMessageIdClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postmessageid.Hooks(f(g(h())))`.
func (c *PostMessageIdClient) Use(hooks ...Hook) {
	c.hooks.PostMessageId = append(c.hooks.PostMessageId, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `postmessageid.Intercept(f(g(h())))`.
func (c *PostMessageIdClient) Intercept(interceptors ...Interceptor) {
	c.inters.PostMessageId = append(c.inters.PostMessageId, interceptors...)
}

// Create returns a builder for creating a PostMessageId entity.
func (c *PostMessageIdClient) Create() *PostMessageIdCreate {
	mutation := newPostMessageIdMutation(c.config, OpCreate)
	return &PostMessageIdCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostMessageId entities.
func (c *PostMessageIdClient) CreateBulk(builders ...*PostMessageIdCreate) *PostMessageIdCreateBulk {
	return &PostMessageIdCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PostMessageIdClient) MapCreateBulk(slice any, setFunc func(*PostMessageIdCreate, int)) *PostMessageIdCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PostMessageIdCreateBulk{err: fmt.Errorf("calling to PostMessageIdClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PostMessageIdCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PostMessageIdCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostMessageId.
func (c *PostMessageIdClient) Update() *PostMessageIdUpdate {
	mutation := newPostMessageIdMutation(c.config, OpUpdate)
	return &PostMessageIdUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostMessageIdClient) UpdateOne(_m *PostMessageId) *PostMessageIdUpdateOne {
	mutation := newPostMessageIdMutation(c.config, OpUpdateOne, withPostMessageId(_m))
	return &PostMessageIdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostMessageIdClient) UpdateOneID(id int) *PostMessageIdUpdateOne {
	mutation := newPostMessageIdMutation(c.config, OpUpdateOne, withPostMessageIdID(id))
	return &PostMessageIdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostMessageId.
func (c *PostMessageIdClient) Delete() *PostMessageIdDelete {
	mutation := newPostMessageIdMutation(c.config, OpDelete)
	return &PostMessageIdDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostMessageIdClient) DeleteOne(_m *PostMessageId) *PostMessageIdDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostMessageIdClient) DeleteOneID(id int) *PostMessageIdDeleteOne {
	builder := c.Delete().Where(postmessageid.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostMessageIdDeleteOne{builder}
}

// Query returns a query builder for PostMessageId.
func (c *PostMessageIdClient) Query() *PostMessageIdQuery {
	return &PostMessageIdQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePostMessageId},
		inters: c.Interceptors(),
	}
}

// Get returns a PostMessageId entity by its id.
func (c *PostMessageIdClient) Get(ctx context.Context, id int) (*PostMessageId, error) {
	return c.Query().Where(postmessageid.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostMessageIdClient) GetX(ctx context.Context, id int) *PostMessageId {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a PostMessageId.
func (c *PostMessageIdClient) QueryPost(_m *PostMessageId) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postmessageid.Table, postmessageid.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, postmessageid.PostTable, postmessageid.PostColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostMessageIdClient) Hooks() []Hook {
	return c.hooks.PostMessageId
}

// Interceptors returns the client interceptors.
func (c *PostMessageIdClient) Interceptors() []Interceptor {
	return c.inters.PostMessageId
}

func (c *PostMessageIdClient) mutate(ctx context.Context, m *PostMessageIdMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostMessageIdCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostMessageIdUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostMessageIdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostMessageIdDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PostMessageId mutation op: %q", m.Op())
	}
}

// UploadTaskClient is a client for the UploadTask schema.
type UploadTaskClient struct {
	config
}

// NewUploadTaskClient returns a client for the UploadTask from the given config.
func NewUploadTaskClient(c config) *UploadTaskClient {
	return &UploadTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uploadtask.Hooks(f(g(h())))`.
func (c *UploadTaskClient) Use(hooks ...Hook) {
	c.hooks.UploadTask = append(c.hooks.UploadTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `uploadtask.Intercept(f(g(h())))`.
func (c *UploadTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.UploadTask = append(c.inters.UploadTask, interceptors...)
}

// Create returns a builder for creating a UploadTask entity.
func (c *UploadTaskClient) Create() *UploadTaskCreate {
	mutation := newUploadTaskMutation(c.config, OpCreate)
	return &UploadTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UploadTask entities.
func (c *UploadTaskClient) CreateBulk(builders ...*UploadTaskCreate) *UploadTaskCreateBulk {
	return &UploadTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UploadTaskClient) MapCreateBulk(slice any, setFunc func(*UploadTaskCreate, int)) *UploadTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UploadTaskCreateBulk{err: fmt.Errorf("calling to UploadTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UploadTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UploadTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UploadTask.
func (c *UploadTaskClient) Update() *UploadTaskUpdate {
	mutation := newUploadTaskMutation(c.config, OpUpdate)
	return &UploadTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UploadTaskClient) UpdateOne(_m *UploadTask) *UploadTaskUpdateOne {
	mutation := newUploadTaskMutation(c.config, OpUpdateOne, withUploadTask(_m))
	return &UploadTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UploadTaskClient) UpdateOneID(id uuidv7.UUID) *UploadTaskUpdateOne {
	mutation := newUploadTaskMutation(c.config, OpUpdateOne, withUploadTaskID(id))
	return &UploadTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UploadTask.
func (c *UploadTaskClient) Delete() *UploadTaskDelete {
	mutation := newUploadTaskMutation(c.config, OpDelete)
	return &UploadTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UploadTaskClient) DeleteOne(_m *UploadTask) *UploadTaskDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UploadTaskClient) DeleteOneID(id uuidv7.UUID) *UploadTaskDeleteOne {
	builder := c.Delete().Where(uploadtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UploadTaskDeleteOne{builder}
}

// Query returns a query builder for UploadTask.
func (c *UploadTaskClient) Query() *UploadTaskQuery {
	return &UploadTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUploadTask},
		inters: c.Interceptors(),
	}
}

// Get returns a UploadTask entity by its id.
func (c *UploadTaskClient) Get(ctx context.Context, id uuidv7.UUID) (*UploadTask, error) {
	return c.Query().Where(uploadtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UploadTaskClient) GetX(ctx context.Context, id uuidv7.UUID) *UploadTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UploadTaskClient) Hooks() []Hook {
	return c.hooks.UploadTask
}

// Interceptors returns the client interceptors.
func (c *UploadTaskClient) Interceptors() []Interceptor {
	return c.inters.UploadTask
}

func (c *UploadTaskClient) mutate(ctx context.Context, m *UploadTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UploadTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UploadTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UploadTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UploadTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UploadTask mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Post, PostMessageId, UploadTask []ent.Hook
	}
	inters struct {
		Post, PostMessageId, UploadTask []ent.Interceptor
	}
)
